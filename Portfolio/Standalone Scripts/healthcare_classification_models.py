# -*- coding: utf-8 -*-
"""Healthcare Classification Models.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1g4MZ6uYkPBuz5Gquehtd_f8ZqqjPQ9gH
"""

#Mount google drive
from google.colab import drive
drive.mount('/content/drive')

#import pandas
import pandas as pd

# Open the csv in the root directory (/content/drive/MyDrive/2. Documents/Hasan work/AI_Coursework2)
data = pd.read_csv('/content/drive/MyDrive/2. Documents/Hasan work/AI_Coursework2/Dataset1.csv')

# Split the input features (x) and the output (y) using .iloc method
x = data.iloc[:, [19, 5, 11]].values
y = data.iloc[:, [0, 7, 1, 2]].values

# Display the first few rows of x and y to check the split
print("Features (x):")
print(x[:5])
print("\nLabels (y):")
print(y[:5])

# Defining the age categories as a dictionary
AGE_CATEGORIES = {
    1: (18, 24),
    2: (25, 29),
    3: (30, 34),
    4: (35, 39),
    5: (40, 44),
    6: (45, 49),
    7: (50, 54),
    8: (55, 59),
    9: (60, 64),
    10: (65, 69),
    11: (70, 74),
    12: (75, 79),
    13: (80, float('inf')),  # 80+ is open-ended
}

def age_to_category(age):
    if not isinstance(age, int) or age < 18:
        return None  # Invalid input or age below minimum category

    for category, (min_age, max_age) in AGE_CATEGORIES.items():
        if min_age <= age <= max_age:
            return category
    return None  # Fallback, should not occur due to defined ranges

def category_to_age(category):
    return AGE_CATEGORIES.get(category)

# Adjust the Diabetes column: 1 for Type 2 diabetes, 0 otherwise
data['Diabetes'] = data['Diabetes'].apply(lambda x: 1 if x == 2 else 0)

# Selecting the input features and output labels
x = data[['Age', 'HvyAlcoholConsump', 'Smoker']].values
y = data[['HeartDiseaseorAttack', 'Diabetes', 'HighBP', 'HighChol']].values

# Split the data into training and testing sets (80-20 split)
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

# Standardize the features
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
x_train_scaled = scaler.fit_transform(x_train)
x_test_scaled = scaler.transform(x_test)

# Train the Gaussian Naive Bayes model
from sklearn.naive_bayes import GaussianNB
from sklearn.multioutput import MultiOutputClassifier
nb_model = MultiOutputClassifier(GaussianNB())
nb_model.fit(x_train_scaled, y_train)

# Make predictions
y_pred = nb_model.predict(x_test_scaled)

# Evaluate the model
from sklearn.metrics import accuracy_score, classification_report
accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred, target_names=['HeartDiseaseorAttack', 'Diabetes', 'HighBP', 'HighChol'])

print(f"Accuracy: {accuracy:.2f}")
print("Classification Report:\n", report)

# Function to predict user input
def predict_user_input(age, smoker_status, hvy_alcohol_status):
    # Prepare user input as a DataFrame
    user_input = pd.DataFrame([[age, smoker_status, hvy_alcohol_status]], columns=['Age', 'Smoker', 'HvyAlcoholConsump'])

    # Scale the user input
    user_input_scaled = scaler.transform(user_input)

    # Make prediction
    prediction = nb_model.predict(user_input_scaled)

    # Create a dictionary to map predictions to their labels
    prediction_labels = {
        'HeartDiseaseorAttack': prediction[0][0],
        'Diabetes': prediction[0][1],
        'HighBP': prediction[0][2],
        'HighChol': prediction[0][3]
    }

    return prediction_labels

print("\nEnter data for the current patient:")
# Example user input
age = age_to_category(int(input("What is the patient's age [in yrs]: ")))
smoker = input("Has the patient smoked in the last 5 years? [Y/N]: ")
hvy_alcohol = input("Does the patient have a heavy weekly consumption of alcohol (more than x14 for men and x7 for women)? [Y/N]: ")

if smoker.lower() == 'y':
    smoker_status = 1
else:
    smoker_status = 0

if hvy_alcohol.lower() == 'y':
    hvy_alcohol_status = 1
else:
    hvy_alcohol_status = 0

# Predict based on user input
predicted_values = predict_user_input(age, smoker_status, hvy_alcohol_status)

# Display the prediction
print("Predicted values based on user input:")
for condition, value in predicted_values.items():
    print(f"{condition}: {'Yes' if value == 1 else 'No'}")